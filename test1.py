# -*- coding: utf-8 -*-
"""test1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FESZY3rSehmdAip_X-W5tjH_QJ6qLrqy
"""

!nvidia-smi

import glob
# Importing drive method from colab for accessing google drive
from google.colab import drive
# Mounting drive
# This will require authentication : Follow the steps as guided
drive.mount('/Data')

!ls /Data/'My Drive'/dataset

import matplotlib.pyplot as plt # plt 用于显示图片
import matplotlib.image as mpimg # mpimg 用于读取图片
import numpy as np

#resize功能
from scipy import misc

# pytorch
import torch
import torch.nn as nn
import torchvision
import torchvision.transforms as transforms
num_classes = 10
# 超参数设置
num_epochs = 20
batch_size = 5
learning_rate = 0.001

classes = ('plane', 'car', 'bird', 'cat',
           'deer', 'dog', 'frog', 'horse', 'ship', 'truck')
# 数据预处理
transform = transforms.Compose([
    transforms.ToTensor(),
    transforms.Normalize((0.5,0.5,0.5),(0.5,0.5,0.5))
    ])

'''
import os
import pickle
def load_cifar_data(filepath,train):
  if os.path.isdir(filepath):
    if train:
      data = []
      label = []
      for name in sorted(os.listdir(filepath))[1:6]:
        print(name)
        data0 = list(load_cifar_batch(os.path.join(filepath,name)).get(b'data'))
        label0 = list(load_cifar_batch(os.path.join(filepath,name)).get(b'labels'))
        data.append(data0)
        label.append(label0)
      dic = (data,label)
      return dic
    else:
      print(sorted(os.listdir(filepath))[7])
      data = list(load_cifar_batch(os.path.join(filepath,sorted(os.listdir(filepath))[7])).get(b'data'))
      label = list(load_cifar_batch(os.path.join(filepath,sorted(os.listdir(filepath))[7])).get(b'labels'))
      dic = (data,label)
      return dic
def load_cifar_batch(filename):
  with open(filename,'rb') as fo:
          data0 = pickle.load(fo,encoding='bytes')
          #data0['data'] = data0['data'].reshape(10000,3,32,32).transpose(0,2,3,1).astype("float")
          return data0
train_data = load_cifar_data('/Data/My Drive/dataset/cifar-10-batches-py',True)
test_data = load_cifar_data('/Data/My Drive/dataset/cifar-10-batches-py',False)
'''

LOAD_CIFAR = True
DOWNLOAD_CIFAR = False
# 从data继承读取数据集的类
from torch.utils.data import Dataset, DataLoader

# 训练数据集
train_data = torchvision.datasets.CIFAR10(
    root='/Data/My Drive/dataset',
    train=True,
    transform=transform,
    download=DOWNLOAD_CIFAR,
)

# 测试数据集
test_data = torchvision.datasets.CIFAR10(
    root='/Data/My Drive/dataset',
    train=False,
    transform=transform
)

# 训练数据加载器
train_loader = torch.utils.data.DataLoader(dataset=train_data,
                                           batch_size=batch_size,
                                           shuffle=True)
# 测试数据加载器
test_loader = torch.utils.data.DataLoader(dataset=test_data,
                                          batch_size=batch_size,
                                          shuffle=False)

# 查看数据,取一组batch
data_iter = iter(test_loader)

images, labels = next(data_iter)
# 取batch中的一张图像
idx = 2
image = images[idx].numpy()
image = np.transpose(image, (1,2,0))
plt.imshow(image)
print(classes[labels[idx].numpy()])

# 搭建卷积神经网络模型
# 三个卷积层
class ConvNet(nn.Module):
    def __init__(self, num_classes=10):
        super(ConvNet, self).__init__()
            # 32*32*3
        self.conv1 = nn.Sequential(
            # 卷积层计算
            nn.Conv2d(3, 5, kernel_size=5, stride=1, padding=2),
            #  批归一化
            nn.BatchNorm2d(5),
            #ReLU激活函数
            nn.ReLU(),
            # 池化层：最大池化
            nn.MaxPool2d(kernel_size=2, stride=1))
            # 31*31*5

        self.conv2 = nn.Sequential(
            nn.Conv2d(5, 8, kernel_size=5, stride=1, padding=2),
            nn.BatchNorm2d(8),
            nn.ReLU(),
            nn.MaxPool2d(kernel_size=2, stride=1))# 搭建卷积神经网络模型
            # 30*30*8

        self.conv3 = nn.Sequential(
            nn.Conv2d(8, 16, kernel_size=5, stride=1, padding=2),
            nn.BatchNorm2d(16),
            nn.ReLU(),
            nn.MaxPool2d(kernel_size=2, stride=2))# 搭建卷积神经网络模型
            # 15*15*16

        self.conv4 = nn.Sequential(
            nn.Conv2d(16, 24, kernel_size=5, stride=1, padding=2),
            nn.BatchNorm2d(24),
            nn.ReLU(),
            nn.MaxPool2d(kernel_size=2, stride=1))# 搭建卷积神经网络模型
            # 14*14*24

        self.conv5 = nn.Sequential(
            nn.Conv2d(24, 32, kernel_size=5, stride=1, padding=2),
            nn.BatchNorm2d(32),
            nn.ReLU(),
            nn.MaxPool2d(kernel_size=2, stride=2))# 搭建卷积神经网络模型
            # 7*7*32

        self.fc = nn.Sequential(
            nn.Dropout(),
            nn.Linear(7*7*32, 400),
            nn.ReLU(),
            nn.Dropout(),
            nn.Linear(400, 120),
            nn.ReLU(),
            nn.Linear(120, num_classes),
        )

    # 定义前向传播顺序
    def forward(self, x):
        out = self.conv1(x)
        out = self.conv2(out)
        out = self.conv3(out)
        out = self.conv4(out)
        out = self.conv5(out)
        out = out.reshape(out.size(0), -1)
        out = self.fc(out)
        return out

# 实例化一个模型
model = ConvNet(num_classes)

# 定义损失函数和优化器
criterion = nn.CrossEntropyLoss()
optimizer = torch.optim.Adam(model.parameters(), lr=learning_rate)

# 设置cuda-gpu
device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')
print(device)
!nvidia-smi

# 开始训练
model = model.cuda()
total_step = len(train_loader)
for epoch in range(num_epochs):
    for i, (images, labels) in enumerate(train_loader):

        images = images.cuda()
        labels = labels.cuda()
        # 前向传播
        outputs = model(images)
        loss = criterion(outputs, labels)

        # 反向传播和优化
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()

        if (i+1) % 100 == 0:
            print ('Epoch [{}/{}], Step [{}/{}], Loss: {:.4f}'
                   .format(epoch+1, num_epochs, i+1, total_step, loss.item()))

# 设置为评估模式
model.eval()

# 输出测试集精度
with torch.no_grad():
    correct = 0
    total = 0
    for images, labels in test_loader:
        images = images.cuda()
        labels = labels.cuda()
        outputs = model(images)
        _, predicted = torch.max(outputs.data, 1)
        total += labels.size(0)
        correct += (predicted == labels).sum().item()

    print('Test Accuracy of the model on the test images: {} %'.format(100 * correct / total))

#  保存模型
torch.save(model.state_dict(), 'model.ckpt')

# 可视化数据查看
# 查看数据,取一组batch
data_iter = iter(test_loader)
images, labels = next(data_iter)
# 取batch中的一张图像，显示图像和真实标签
idx = 4
image = images[idx].numpy()
image = np.transpose(image, (1,2,0))
plt.imshow(image)
print('true:',classes[labels[idx].numpy()])
# 转换为（B,C,H,W）大小
imagebatch = image.reshape(-1,3,32,32)

# 转换为torch tensor
image_tensor = torch.from_numpy(imagebatch)
image_tensor = image_tensor.cuda()
# 调用模型进行评估
model.eval()
output = model(image_tensor)
precise, predicted = torch.max(output.data, 1)
pre = predicted.cpu().numpy()
pci = precise.cpu().numpy()
print(pre) # 查看预测结果ID
print('result:',classes[pre[0]])
#print(pci[0])